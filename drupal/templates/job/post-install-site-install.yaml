{{- if .Values.drupal.install }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "drupal.fullname" . }}-site-install
  labels:
    app.kubernetes.io/name: {{ include "drupal.name" . }}
    helm.sh/chart: {{ include "drupal.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "drupal.name" . }}
        helm.sh/chart: {{ include "drupal.chart" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      restartPolicy: OnFailure
      containers:
      - name: drush
        image: "{{ .Values.drupal.image }}:{{ default .Chart.AppVersion .Values.drupal.tag }}"
        imagePullPolicy: {{ default "" .Values.drupal.imagePullPolicy | quote }}
        command:
          - '/bin/sh'
          - '-c'
          - |
              # Wait for MySQL to be available
              until drush sql:query 'SHOW TABLES;'; do echo Waiting for MySQL; sleep 3; done
              echo MySQL available

              # Check Drush status
              drush status

              # Run site install
              drush site:install {{ .Values.drupal.profile }} \
                --sites-subdir=default \
                --db-url="mysql://{{ .Values.mysql.mysqlUser }}:$MYSQL_PASSWORD@{{ .Release.Name }}-mysql:{{ .Values.mysql.service.port }}/{{ .Values.mysql.mysqlDatabase }}" \
                --account-name={{ .Values.drupal.username }} \
                --account-pass=$DRUPAL_ADMIN_PASSWORD \
                --site-mail={{ .Values.drupal.siteEmail | quote }} \
                --site-name={{ .Values.drupal.siteName | quote }} \
                install_configure_form.update_status_module='array(FALSE,FALSE)' \
                --yes

              # Run entity updates
              drush -y entity:updates

              # Enable s3fs
              drush -y pm:enable s3fs

              # Configure s3fs
              {{- if eq .Values.files.provider "minio" }}
              drush -y config:set s3fs.settings bucket '{{ .Values.minio.defaultBucket.name }}'
              drush -y config:set s3fs.settings region 'us-east-1'
              {{- else if eq .Values.files.provider "s3" }}
              drush -y config:set s3fs.settings bucket '{{ .Values.s3.bucket }}'
              drush -y config:set s3fs.settings region '{{ .Values.s3.region }}'
              {{ end }}

              {{- if eq .Values.files.provider "minio" }}
              drush -y config:set s3fs.settings use_https 0
              {{- else }}
              drush -y config:set s3fs.settings use_https 1
              {{ end }}

              drush -y config:set s3fs.settings no_rewrite_cssjs 0

              {{- if .Values.files.cname.enabled }}
              drush -y config:set s3fs.settings use_cname 1
              {{- if eq .Values.files.provider "minio" }}
              drush -y config:set s3fs.settings domain {{ print .Values.files.cname.hostname "/" .Values.minio.defaultBucket.name | quote }}
              {{- else }}
              drush -y config:set s3fs.settings domain {{ print .Values.files.cname.hostname | quote }}
              {{- end }}
              {{- else if eq .Values.files.provider "minio" }}
              drush -y config:set s3fs.settings use_cname 1
              drush -y config:set s3fs.settings domain '/{{ .Values.minio.defaultBucket.name }}'
              {{- else }}
              drush -y config:set s3fs.settings use_cname 0
              {{- end }}

              {{- if eq .Values.files.provider "minio" }}
              drush -y config:set s3fs.settings use_customhost 1
              drush -y config:set s3fs.settings hostname '{{ .Release.Name }}-minio:{{ .Values.minio.service.port }}'
              drush -y config:set s3fs.settings use_path_style_endpoint 1
              {{- else if and (eq .Values.files.provider "s3") .Values.s3.customHost.enabled }}
              drush -y config:set s3fs.settings use_customhost 1
              drush -y config:set s3fs.settings hostname '{{ .Values.s3.customHost.hostname }}'
              {{- if .Values.s3.customHost.pathBased }}
              drush -y config:set s3fs.settings use_path_style_endpoint 1
              {{- else }}
              drush -y config:set s3fs.settings use_path_style_endpoint 0
              {{- end }}
              {{- else }}
              drush -y config:set s3fs.settings use_customhost 0
              drush -y config:set s3fs.settings use_path_style_endpoint 0
              {{- end }}

              drush -y config:set s3fs.settings use_s3_for_public 1
              drush -y config:set s3fs.settings use_s3_for_private 1

              drush -y config:set s3fs.settings public_folder '{{ .Values.files.folders.public }}'
              drush -y config:set s3fs.settings private_folder '{{ .Values.files.folders.private }}'

              # Change WxT theme
              drush -y config:set wxt_library.settings wxt.theme '{{ .Values.drupal.wxtTheme }}'

              # Rebuild caches
              drush -y cache:rebuild

              {{- if .Values.drupal.migrate }}
              # Migrate content
              drush -y config:set migrate_plus.migration.wxt_file process.uri uri
              drush -y migrate:import wxt_file
              drush -y s3fs-refresh-cache
              drush -y migrate:import --group wxt --tag 'Core'
              drush -y migrate:import --group gcweb --tag 'Core'
              drush -y migrate:import --group gcweb --tag 'Menu'

              # Disable maintenance mode
              drush -y state:set system.maintenance_mode FALSE
              {{- end }}
        env:
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              # This is not ideal, but calling {{ include "mysql.secretName" . }}
              # was returning the wrong result.
              name: "{{ .Release.Name }}-mysql"
              key: mysql-password
        - name: DRUPAL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              # This is not ideal, but calling {{ include "mysql.secretName" . }}
              # was returning the wrong result.
              name: "{{ include "drupal.fullname" . }}"
              key: password
{{- if eq .Values.files.provider "minio" }}
        - name: S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-minio"
              key: accesskey
        - name: S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-minio"
              key: secretkey
{{- else if eq .Values.files.provider "s3" }}
        - name: S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-s3"
              key: accesskey
        - name: S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-s3"
              key: secretkey
{{- end }}
{{- if .Values.extraVars }}
{{ toYaml .Values.extraVars | indent 8 }}
{{- end }}
        ports:
        - containerPort: 9000
          name: tcp-php-fpm
          protocol: TCP
        volumeMounts:
        - name: cm-drupal
          mountPath: /var/www/html/sites/default/settings.php
          subPath: settings.php
          readOnly: true
        - name: cm-drupal
          mountPath: /var/www/html/sites/default/extra.settings.php
          subPath: extra.settings.php
          readOnly: true
        - name: twig-cache
          mountPath: /cache/twig
        - name: config-sync
          mountPath: /config/sync
        - name: files
          mountPath: /var/www/html/sites/default/files
          subPath: public
        - name: files
          mountPath: /var/www/private
          subPath: private
      {{- if .Values.drupal.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.drupal.imagePullSecrets | indent 8 }}
      {{- end }}
      # Allow non-root user to access PersistentVolume
      securityContext:
{{ toYaml .Values.drupal.securityContext | indent 8 }}
      volumes:
      - name: cm-drupal
        configMap:
          name: {{ include "drupal.fullname" . }}
      - name: twig-cache
        emptyDir: {}
      - name: config-sync
        emptyDir: {}
      - name: files
        emptyDir: {}
{{- end }}
